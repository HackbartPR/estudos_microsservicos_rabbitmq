services:
  # Geral
  broker:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    networks:
      - microservices-network

  jaeger:
    image: jaegertracing/all-in-one:1.72.0
    ports:
      - "16686:16686" #UI
      - "14268:14268" # Traces HTTP
      - "5778:5778"
      - "4317:4317" #OTLP/gRPC
      - "4318:4318" # OTLP/HTTP
      - "14250:14250"
      - "9411:9411"
    networks:
      - microservices-network

  api-gateway:
    image: kong:3.9
    environment:
      - KONG_DATABASE=off
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_ADMIN_GUI_URL=http://localhost:8002
      - KONG_DECLARATIVE_CONFIG=/kong/config.yaml
    volumes:
      - "./docker/kong/config.yaml:/kong/config.yaml"
    ports:
      - "8000:8000" # Proxy (API)
      - "8001:8001" # API (Admin)
      - "8002:8002" # UI (Admin)
      - "8443:8443" # Proxy SSL (HTTPs)
      - "8444:8444" # Proxy SSL (Admin)(HTTPs)
    depends_on:
      orders_api:
        condition: service_healthy
      invoices_api:
        condition: service_healthy
    restart: on-failure

  # Orders API
  pg:
    image: postgres:17-alpine
    ports:
      - '5482:5432'
    environment:
      - POSTGRES_DB=orders
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=docker
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  flyway:
    image: flyway/flyway:10
    container_name: flyway_migrations
    depends_on:
      pg:
        condition: service_healthy
    volumes:
      - ./Orders/Migrations:/flyway/sql
    command: -url=jdbc:postgresql://pg:5432/orders -user=postgres -password=docker -schemas=public migrate
    networks:
      - microservices-network
    restart: on-failure

  orders_api:
    build:
      context: .
      dockerfile: Orders/Dockerfile
    environment:
      - EnviromentVariables__Database__ConnectionString=Host=pg;Port=5432;Username=postgres;Password=docker;Database=orders
      - EnviromentVariables__Broker__ConnectionString=amqp://broker:5672
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      pg:
        condition: service_healthy
    networks:
      - microservices-network
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 5s
      retries: 5

  # Invoices API
  pg-invoices:
    image: postgres:17-alpine
    ports:
      - '5472:5432'
    environment:
      - POSTGRES_DB=invoices
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=docker
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  flyway-invoices:
    image: flyway/flyway:10
    container_name: flyway_migrations-invoices
    depends_on:
      pg-invoices:
        condition: service_healthy
    volumes:
      - ./Invoices/Migrations:/flyway/sql
    networks:
      - microservices-network
    command: -url=jdbc:postgresql://pg-invoices:5432/invoices -user=postgres -password=docker -schemas=public migrate
    restart: on-failure

  invoices_api:
    build:
      context: .
      dockerfile: Invoices/Dockerfile
    environment:
      - EnviromentVariables__Database__ConnectionString=Host=pg-invoices;Port=5432;Username=postgres;Password=docker;Database=invoices
      - EnviromentVariables__Broker__ConnectionString=amqp://broker:5672
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      pg-invoices:
        condition: service_healthy
    networks:
      - microservices-network
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 5s
      retries: 5

volumes:
  rabbitmq:

networks:
  microservices-network:
    name: microservices-network
    driver: bridge